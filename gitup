#!/bin/sh

# GitUp
# Copyright (c) 2015, Federico Dami√°n Schonborn <github.com/feskyde>
# All rights reserved.

# script-skeleton (https://github.com/feskyde/script-skeleton)

## set script info

PRETTY_NAME="GitUp"
MAYOR_RELEASE="0"
MINOR_RELEASE="3"
DASH_RELEASE="1"
CODENAME="Euphonium"

## license(s)
 
LICENSE="BSD"

## about command info

DESCRIPTION="The shell script that makes git easier."
WEBSITE="https://github.com/feskyde/gitup"

### ASCII art
### ISSUES: 'echo -e' prints this very buggy

# for now, it gets disabled
#ASCII=""

## help command info

BINARY="gitup"
ARGUMENTS="[COMMAND]"

### options
### ISSUES: you need to put an "\n" (or the $NLINE variable) on every new line

OPTIONS_HEADER="\nList of options:"
OPTIONS_LIST="
\nConfiguration:
\n
\nlc, local-config: local user config
\ngc, global-config: global user config
\n
\nRepository:
\n
\nin, init: initializes git
\nrs, repo-setup: set-up a repository
\ncm, commit: push a new commit
\ncl, clone: clone a repository
\nfc, fetch: fetches not present objects from remote
\ngb, garbage-collector: optimizes your repository
\ncf, check-filesystem: do an integrity check of repository
\nrt, reset: reset directory to lastest commit
\n
\nStatus:
\n
\nst, status: see repository status
\nlg, log: see all commits
\n
\nFiles:
\nlt, ls-tree: see a tree of files form a branch
\ndf, diff: see diff between files
\ngp, grep: search a string on all files
\n
\nBranches:
\n
\nbc, branch-create: create a branch
\nbr, branch-remove: remove a branch
\nbs, branch-switch: switch to a branch
\nmg, merge: merge two branches
\n
\nPull requests:
\n
\nrf, request-fetch: Fetch pull request data"

# set message prompt settings

ERROR="\e[31;1m"
DONE="\e[32;1m"
BOLD="\e[1m"
COLEND="\e[0m"
NLINE="\n"

# dependencies

DEPENDS="git"

# help and about sections

## prints the help section

print_help() {
echo -e ""$NLINE""$BOLD"Usage: "$BINARY" "$ARGUMENTS""$COLEND""$NLINE""$OPTIONS_HEADER""$NLINE""$OPTIONS_LIST""$NLINE""
}

## prints the about section

print_about() {
echo -e ""$NLINE""$BOLD""$PRETTY_NAME" ver. "$MAYOR_RELEASE"."$MINOR_RELEASE"-"$DASH_RELEASE" \"$CODENAME\""
echo -e ""$DESCRIPTION""
echo -e "Website: "$WEBSITE""
echo -e ""$PRETTY_NAME" is released under the "$LICENSE" license"$COLEND""$NLINE""
}

# pre-runtime functions

## checks git binary existence

### ISSUE: you need to replace "$DEPENDS" with the dependant binary name ONLY on the function name (check_"$DEPENDS"bin), in the pre-runtime check above is it not neccesary

check_gitbin() {
if [ ! -f /usr/bin/"$DEPENDS" ]
then
	echo -e ""$NLINE""$ERROR"ERROR:"$COLEND""
	echo -e ""$BOLD"Command "$DEPENDS" not found. Please check your installation."$COLEND""$NLINE""
	exit
fi
}

# check if global and local configurations are setted

SELECT_CONFIG="\"Set global configuration\" \"Set local configuration\""

check_config() {
if [ ! -f ~/.gitconfig ] && [ ! -f ./.git/config ]
then
	echo -e ""$NLINE""$ERROR"ERROR:"$COLEND""
	echo -e ""$NLINE""$BOLD"There is not any config file present."$COLEND""$NLINE""
	echo -e ""$NLINE""$BOLD"What configuration do you want to set?"$COLEND""$NLINE""
	eval set $SELECT_CONFIG
	select opt in "$@";do
		if [ "$opt" = "Set global configuration" ]
		then
			set_config
			git config --global user.name "$user_name"
			git config --global user.email "$user_email"
			print_done
		elif [ "$opt" = "Set local configuration" ]
		then
			set_config
			git config --local user.name "$user_name"
			git config --local user.email "$user_email"
			print_done
		else
			echo -e ""$NLINE""$ERROR"ERROR:"$COLEND""$NLINE""
			echo -e ""$NLINE""$BOLD"Invalid option."$COLEND""$NLINE""
		fi
	done
fi
}

## checks if any .git folder is present

check_folder() {
	if [ ! -d ./.git ]
	then
		echo -e ""$NLINE""$ERROR"ERROR:"$COLEND""$NLINE""
		echo -e ""$NLINE""$BOLD"There is not a .git folder present."$COLEND""$NLINE""
		echo -e ""$NLINE""$BOLD"Running repo-setup..."$COLEND""$NLINE""
		git_init
		read_names
		echo -e ""$NLINE""$BOLD"Adding remote origin..."$COLEND""$NLINE""
		git remote add origin https://github.com/"$user_name"/"$repo_name".git
		print_done
fi
}

# runtime functions

set_config() {
read -p $'\n\e[1mYour real name: \e[0m' user_name
read -p $'\n\e[1mYour e-mail: \e[0m' user_email
echo -e ""$NLINE""$BOLD"Setting..."$COLEND""
}

## function for commits

make_commit() {
read -p $'\n\e[1mCommit message: \e[0m' commit_message
echo -e ""$NLINE""$BOLD"Adding file changes to commit..."$COLEND""
git add .
git commit -m "$commit_message"
}

## function for tags

make_tag() {
read -p $'\n\e[1mTag message: \e[0m' tag_message
read -p $'\n\e[1mTag version: \e[0m' tag_version
echo -e ""$NLINE""$BOLD"Adding file changes to new tag..."$COLEND""
git add .
git tag -a "$tag_version" -m "$tag_message"
}

## reads user_name and repo_name

read_names() {
read -p $'\n\e[1mYour username: \e[0m' user_name
read -p $'\n\e[1mRepository name: \e[0m' repo_name
}

## initializes git

git_init() {
echo -e ""$NLINE" Initializing git..."$COLEND""
git init
}

## see repo status

git_status() {
echo -e ""$NLINE""$BOLD"Repository status:"$COLEND""$NLINE""
git status
}

# post-runtime functions

## prints the 'Done! message'

print_done() {
	echo -e ""$NLINE""$DONE"Done!"$COLEND""$NLINE""
}

# pre-runtime check

## checks if git binary exists

check_gitbin

# start of case (commands)

case $1 in
	"about")
		print_about
		;;
	"help")
		print_help
		;;
	"global-config"|"gc")
		set_config
		git config --global user.name "$user_name"
		git config --global user.email "$user_email"
		print_done
		;;
	"local-config"|"lc")
		set_config
		git config --local user.name "$user_name"
		git config --local user.email "$user_email"
		print_done
		;;
	"init"|"in")
		check_config
		git_init
		make_commit
		read_names
		echo -e ""$NLINE""$BOLD"Adding remote origin..."$COLEND""$NLINE""
		git remote add origin https://github.com/"$user_name"/"$repo_name".git
		print_done
		;;
	"repo-setup"|"rs")
		check_config
		git_init
		make_commit
		read_names
		echo -e ""$NLINE""$BOLD"Adding remote origin..."$COLEND""$NLINE""
		git remote add origin https://github.com/"$user_name"/"$repo_name".git
		echo -e ""$NLINE""$BOLD"Pushing to master branch..."$COLEND""$NLINE""
		git push -u origin master
		print_done
		;;
	"commit"|"cm")
		check_config
		check_folder
		make_commit
		read -p $'\n\e[1mBranch to push: \e[0m' branch_push
		echo -e ""$NLINE""$BOLD"Pushing to "$branch_push" branch..."$COLEND""$NLINE""
		git push -u origin "$branch_push"
		print_done
		;;
	"tag"|"tg")
		check_config
		check_folder
		make_tag
		read -p $'\n\e[1mBranch to push: \e[0m' branch_push
		echo -e ""$NLINE""$BOLD"Pushing to "$branch_push" branch..."$COLEND""$NLINE""
		git push -u origin "$branch_push"
		print_done
		;;
	"clone"|"cl")
		read -p $'\n\e[1mRepository to clone: \e[0m' repo_clone
		read -p $'\n\e[1mRepository owner: \e[0m' repo_owner
		git clone https://github.com/"$repo_owner"/"$repo_clone".git
		print_done
		;;
	"fetch"|"fc")
		git fetch origin
		print_done
		;;
	"garbage-collector"|"gb")
		git gc
		print_done
		;;
	"check-filesystem"|"cf")
		git fsck
		print_done
		;;
	"reset"|"rt")
		git reset --hard HEAD
		print_done
		;;
	"status"|"st")
		git_status
		print_done
		;;
	"log"|"lg")
		git log
		print_done
		;;
	"ls-tree"|"lt")
		read -p $'\n\e[1mBranch to show: \e[0m' branch_name
		echo -e ""$NLINE""$BOLD"Showing branch "$branch_name"..."$COLEND""$NLINE""
		git ls-tree "$branch_name"
		print_done
		;;
	"diff"|"df")
		git diff
		print_done
		;;
	"grep"|"gp")
		read -p $'\n\e[1mString to search: \e[0m' search_string
		git grep "$search_string"
		print_done
		;;
	"branch-create"|"bc")
		read -p $'\n\e[1mName your new branch: \e[0m' branch_name
		echo -e ""$NLINE""$BOLD"Creating branch "$branch_name"..."$COLEND""$NLINE""
		git branch "$branch_name"
		print_done
		;;
	"branch-remove"|"br")
		read -p $'\n\e[1mBranch to remove: \e[0m' branch_name
		echo -e ""$NLINE""$BOLD"Removing branch "$branch_name"..."$COLEND""$NLINE""
		git branch -D "$branch_name"
		print_done
		;;
	"branch-switch"|"bs")
		read -p $'\n\e[1mBranch to switch: \e[0m' branch_name
		echo -e ""$NLINE""$BOLD"Switching to branch "$branch_name"..."$COLEND""$NLINE""
		git checkout "$branch_name"
		print_done
		;;
	"merge"|"mg")
		read -p $'\n\e[1mBranch to merge: \e[0m' branch_name
		echo -e ""$NLINE""$BOLD"Merging..."$COLEND""$NLINE""
		git merge "$branch_name"
		print_done
		;;
	"request-fetch"|"rf")
		read -p $'\n\e[1mRequest ID: \e[0m' request_id
		read -p $'\n\e[1mBranch: \e[0m' request_branch
		echo -e ""$NLINE""$BOLD"Fetching files from the "$request_branch" branch..."$COLEND""$NLINE""
		git fetch origin pull/"$request_id"/head:"$request_branch"
		echo -e ""$NLINE""$BOLD"Switching to branch "$request_branch"..."$COLEND""$NLINE""
		git checkout "$request_branch"
		echo -e ""$NLINE""$BOLD"When you think you're ready, you can push the new branch"$COLEND""
		echo -e ""$BOLD"using 'gitup commit' and setting the branch name to "$request_branch""$COLEND""$NLINE""
		print_done
		;;
esac